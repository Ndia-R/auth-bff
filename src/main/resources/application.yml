spring:
  application:
    name: auth-bff

  # OAuth2 Client Configuration
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: ${KEYCLOAK_CLIENT_ID}
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            scope: openid,profile,email
            authorization-grant-type: authorization_code
            redirect-uri: ${KEYCLOAK_REDIRECT_URI}
        provider:
          keycloak:
            user-name-attribute: preferred_username
            # 本番環境の場合は、以下のissuer-uriだけにして
            # 他のauthorization-uri、token-uri、jwk-set-uriはコメントアウトまたは削除してください
            # issuer-uri: ${KEYCLOAK_ISSUER_URI}
            authorization-uri: ${KEYCLOAK_AUTHORIZE_URI}
            token-uri: ${KEYCLOAK_TOKEN_URI}
            jwk-set-uri: ${KEYCLOAK_JWK_URI}

  # Redis Configuration for Session Storage
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Session Configuration
  session:
    store-type: redis
    timeout: 30m
    redis:
      flush-mode: on_save
      namespace: spring:session

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /
    session:
      cookie:
        name: BFFSESSIONID
        http-only: true
        secure: ${COOKIE_SECURE:false}
        same-site: lax
        max-age: 1800

# Logging Configuration
logging:
  level:
    root: INFO
    com.example.auth_bff: INFO
    # Spring Security関連のログは警告以上のみ
    org.springframework.security: WARN
    org.springframework.security.oauth2: WARN
    org.springframework.session: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Keycloak Configuration
keycloak:
  logout-uri: ${KEYCLOAK_LOGOUT_URI:http://keycloak:8080/realms/test-user-realm/protocol/openid-connect/logout}
  post-logout-redirect-uri: ${KEYCLOAK_POST_LOGOUT_REDIRECT_URI:http://localhost:5173/logout-complete}

# Application Configuration
app:
  # フロントエンドURL
  frontend:
    url: ${FRONTEND_URL:http://localhost:5173}
  # リソースサーバーURL
  resource-server:
    url: ${RESOURCE_SERVER_URL:http://api.example.com}
  # CORS許可オリジン
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173,http://localhost:*}

# Management and Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when_authorized